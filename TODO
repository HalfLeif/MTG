
# Functionality
- Can play land after drawing if did not play land in first main
- Support spell with mana cost X and use when appropriate. Reward is X-1.
- Search for reasonable land combinations using only few iterations (25), and then refine best N of those with more iterations (200). Can do recursively for top N-1 with more iterations until stable order?

# Suggest deck
1. (Done) Parse draft order from html. Assign bonus points automatically according to draft order.
2. (Done) Assemble a random deck
  a. (Done) Search for best land distribution (small N)
  b. (Done) Simulate medium N turns while tracking how much contribution each individual card does
  d. (Done) Replace 3 cards, either 3 worst or using weighted random distribution
  e. (Done) Repeat from (a) until ~stable
  f. (Done) Keep track of best K decks produced
3. Repeat from (2) a couple of times
4. For each of K decks, simulate (large N)
5. Present best produced decks

# Implementation
- Measure total latency, and per iteration latency, in order to see which implementation is faster.
- Use string_view for parsing mana costs.
- Use std::array<int>, perhaps with thin wrapper to represent ManaCost instead of std::map.
- Use thin wrapper (pointer type) instead of copying Spells when simulating.
